[/    Copyright (c) 2013-2016 Vinnie Falco (vinnie dot falco at gmail dot com)    Distributed under the Boost Software License, Version 1.0. (See accompanying    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)][section:basic_store basic_store<class Hasher, class File>]A high performance, insert-only key/value database for SSDs.[br][br]A database is represented by triplet of three files: the data file, the key file,and the log file.  These files together constitute a database of key/value pairs.Each file has a distinct header in a well known format.The data file holds all of the key/value pairs and is serially iterable. Thekey file holds a hash table indexing all of the contents in the data file.The log file holds information used to roll the database back in the eventof a failure.[br][br]Operations which apply to the database as whole such as create, recover areimplemented as free functions which include the names of the data, key andlog files as parameters.[br][br]In order to alter or access of the contents of a database, one createsa data structure of type "store". Operations on the contents of the databasesuch as insertions, fetches implemented as member functions of the "store"type.[link type_requirements.Hasher `Hasher`][heading Template Parameters][table [[Type][Description]]  [[[link nudb.type_requirements.Hasher `Hasher`]][    The hash function to use. This type must meet the requirements of Hasher.  ]]  [[[link nudb.type_requirements.File `File`]][    The type of File object to use. This type must meet the requirements of File.   ]]][heading Notation]* `S` a `basic_store` type* `s` an instance of type S* `dp` an instance of type [link nudb.ref.nudb__path_type path_type]which correponds to a data file.* `kp` an instance of type [link nudb.ref.nudb__path_type path_type]which correponds to a key file.* `lp` an instance of type [link nudb.ref.nudb__path_type path_type]which correponds to a log file.* `ec` an instance of a reference to the type      [link nudb.ref.nudb__error_code error_code]* `k` a memory address of type void * used for storing a database key* `n` a number of bytes. Type is `std::size_t`* `d` a memory address of type void * used for storing data* `args...` list of arguments for opening files* `o` an offset from the beginning of a file. Type is `std::size_t`* `a` a memory address of type void ** `salt` an random seed of type std::uint64_t* `appnum` an unique integer of type std::uint64_t to identify the database.[heading Valid Expressions - Member Functions][table [[Operation] [Return Type] [Description]]  [    [[link nudb.ref.nudb__basic_store.appnum `s.appnum()`]]    [std::uint64_t]    [      Return the appnum associated with the database.     ]  ]  [    [[link nudb.ref.nudb__basic_store.block_size `s.block_size()`]]    [std::size_t]    [      Return the block size associated with the database.     ]  ]  [    [[link nudb.ref.nudb__basic_store.close `s.close(ec)`]]    [void]    [      Close the database.     ]  ]  [    [[link nudb.ref.nudb__basic_store.dat_path `s.dat_path()`]]    [path_type const&]    [      Return the path to the data file.     ]  ]  [    [[link nudb.ref.nudb__basic_store.fetch `s.fetch(k, c, ec)`]]    [void]    [      Fetch a value.     ]  ]  [    [[link nudb.ref.nudb__basic_store.insert `s.insert(k, d, n, ec)`]]    [void]    [      Insert a value.     ]  ]  [    [[link nudb.ref.nudb__basic_store.is_open `s.is_open()`]]    [bool]    [      Returns true if the database is open.     ]  ]  [    [[link nudb.ref.nudb__basic_store.key_path `s.key_path()`]]    [path_type const&]    [      Return the path to the key file.     ]  ]  [    [[link nudb.ref.nudb__basic_store.key_size `s.key_size()`]]    [std::size_t]    [      Return the key size associated with the database.     ]  ]  [    [[link nudb.ref.nudb__basic_store.log_path `s.log_path()`]]    [path_type const&]    [      Return the path to the log file.     ]  ]  [    [[link nudb.ref.nudb__basic_store.open `s.open(dp, kp, lp, ec, args...)`]]    [void]    [      Open a database.     ]  ]  [    [[link nudb.ref.nudb__basic_store.basic_store `basic_store()`]]    [ ]    [      Default constructor.       Copy constructor disallowed.    ]  ]  [    [[link nudb.ref.nudb__basic_store._basic_store `~basic_store()`]]    [ ]    [      Destroy the database.     ]  ]][heading Valid Expressions - Free Functions][table [[Operation] [Return Type] [Description]]  [    [[link nudb.ref.nudb__create    ``    create<H, F, Args...>(        dp,        kp,        lp,        appnum,        n,        salt,        lf,        ec,        args...    )    ``    ]]    [void]    [      Create a new database.    ]  ]  [    [[link nudb.ref.nudb__recover    ``    recover<H, F, Args...>(        dp,        kp,        lp,        appnum,        n,        n,        lf,        ec,        args...    )    ``    ]]    [void]    [      Recover a database after it was closed unexpectedly.    ]  ]  [    [[link nudb.ref.nudb__rekey    ``    rekey<H, F, Args...>(        dp,        kp,        lp,        n,        lf,        ic,        n,        ec,        pr        args...    )    ``    ]]    [void]    [      Rebuild the database key.    ]  ]  [    [[link nudb.ref.nudb__verify    ``    verify<H, P>(        v,        dp,        kp,        lp,        n,        p,        ec    )    ``    ]]    [void]    [      Rebuild the database key.    ]  ]  [    [[link nudb.ref.nudb__visit    ``    visit<C, P>(        p,        c,        pr,        lp,        ec    )    ``    ]]    [void]    [      open database and invoke C for every key/data pair.    ]  ]  [    [[link nudb.ref.nudb__make_salt    ``    make_salt()    ``    ]]    [std::uint64_t]    [      open database and invoke C for every key/data pair.    ]  ]][heading Header][@../../include/nudb/basic_store.hpp `#include <nudb/basic_store.hpp>`][heading Models]The simplest and most common usage of basic_store is the store class which is defined like this:`` #include <nudb/native_file.hpp> #include <nudb/xxhasher.hpp> using store = basic_store< xxhasher, native_file >;``[heading Example]``#include <nudb/basic_store.hpp>nudb::store db;nudb::error_code ec;db.open("db.dat", "db.key", "db.log", ec);``[endsect]