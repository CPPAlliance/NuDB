[/    Copyright (c) 2013-2016 Vinnie Falco (vinnie dot falco at gmail dot com)    Distributed under the Boost Software License, Version 1.0. (See accompanying    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)][/[section:error_code [@http://www.boost.org/doc/libs/1_64_0/libs/system/doc/reference.html#Class-error_code] `boost::system::error_code`]][section:error_code error_code]Invoking functions in this library can result in errors.  Such errors mightbe detected by the functions of this library or be detected by other componentsthat this library depends upon such as the C++ standard library or underlyingoperating system.  So all functions in this library return an error code of type`boost::system::error_code`.  This type is capable of holding error codesreturned from any possible source.  Given this, it's not surprising that it'ssomewhat more complex than a simple integer value.  Full description is beyondthe scope of this documentation, but fortunately there are various sources whichtogether provide a good explanation of how to use it.[variablelist  [[    [@http://www.boost.org/doc/libs/1_64_0/libs/system/doc/index.html    Boost System Library]  ][    This is the official documentation for the Boost System Library which    includes the description of boost::system::error_code used by this library  ]]  [[    [@http://en.cppreference.com/w/cpp/error    C++ Standard Library version]  ][    The Boost System Library has been incorporated into the standard library    as part of the C++ standard error handling utilities.  Except for the    substitution of std:: for boost::system:: namespace, the libraries are    identical.  This link points to the standard library documentation which    may be used in addition to the boost version.  ]]  [[    [@http://blog.think-async.com/2010/04/system-error-support-in-c0x-part-1.html    Thinking Asyncronously in C++]  ][    Another essential reference on the design and usage of the `error_code`.  ]]][heading Associated Types][itemized_list[    [@http://www.boost.org/doc/libs/1_64_0/libs/system/doc/reference.html#Header-error_code `boost::system::error::ercc`]    list of values which might be used as values by    [@http://www.boost.org/doc/libs/1_64_0/libs/system/doc/reference.html#Class-error_code `boost::system::error_code`].][    [@../../include/nudb/error.hpp `nudb::error`]    list of values which might be used as values NuDB library functions.][    [@http://www.boost.org/doc/libs/1_64_0/libs/system/doc/reference.html#Class-system_error `boost::system::error::system_error`]]][heading Notation][itemized_list[`ec` an instance of a reference to the type `boost::system::error_code`.][<enum value> a value listed in either`boost::system::errc` or`nudb::error`.]][heading Valid Expressions][table    [[Operation] [Return Type] [Description]]    [        [[@http://www.boost.org/doc/libs/1_64_0/libs/system/doc/reference.html#Class-error_code-observers `ec.message()`]]        [`std::string`]        [            Return an explanation of the error code as a string        ]    ]    [        [[@http://www.boost.org/doc/libs/1_64_0/libs/system/doc/reference.html#Class-system_error `boost::system::error::system_error(ec)`]]        [`boost::system::error::system_error`]        [            Construct a standard exception type.  The result can be the object            of a C++ "throw" statement.        ]    ]    [        [`ec == `<enum value>]        [bool]        [            Compare an error_code with an error enum.        ]    ]    [        [`ec != `<enum value>]        [bool]        [            Compare an error_code with an error enum.        ]    ]][heading Header][@http://www.boost.org/doc/libs/1_64_0/libs/system/doc/reference.html#Header-error_code `#include <boost/system/error_code.hpp>`][br][@../../include/nudb/error.hpp `#include <nudb/error.hpp>`][heading Example]``#include <boost/system/error_code.hpp>#include <nudb/error.hpp>// ...boost::system::error_code ec;nudb::store db;db.open("db.dat", "db.key", "db.log", ec);if(ec == nudb::error::no_key_file)    std::cerr << ec.message() << std::endl;// ...``[endsect]