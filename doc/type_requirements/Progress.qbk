[/
    Copyright (c) 2013-2016 Vinnie Falco (vinnie dot falco at gmail dot com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:Progress Progress]

An instance of type [*Progress] feedback to callers on the progress of
long running operations such as calls to [link nudb.ref.nudb__verify verify],
[link nudb.ref.nudb__visit visit] or [link nudb.ref.nudb__rekey rekey]
which can take days or weeks for databases that measure in the terabytes.
These objects are used by passing them as parameters to the appropriate functions,
where the will be called periodically with numbers that indicate the amount of
work completed, versus the total amount of work required.

[heading Notation]
* `P` is a progress class
* `p` is an instance of type `P`
* `n` is a value of type `std::uint64_t` representng numerator of the fraction of work done.
* `d` is a value of type `std::uint64_t` representng denominator of the fraction of work done.

[heading Valid Expressions]

[table
[[operation] [type] [semantics, pre/post-conditions]]
[
    [`p(n, d)`]
    [ ]
    [
        Indicates to the progress object that work has been performed and
        intermediate results calculated. `n` represents the amount of work
        completed from the beginning of the operation. `d` represents the
        total amount of work required. The fraction of completed work is
        therefore `n/d`, with zero representing no work complete, and one
        represents all work complete.
    ]
]
[
    [`is_Progress<P>`]
    [`std::true_type`]
    [
        returns `std::true_type` for `P`. Otherwise returns `std::false_type`
    ]
]
]

[heading Models]
* [link nudb.ref.nudb__no_progress no_progress]
[br]
This is a default implementation which does nothing.

[endsect]
