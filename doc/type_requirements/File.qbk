[/
    Copyright (c) 2013-2016 Vinnie Falco (vinnie dot falco at gmail dot com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:File File]

The [*File] concept abstracts access to files in the underlying file system.

To support interfaces other than Win32 or POSIX, callers may provide their
own [*File] type that meets these requirements. The unit test code also provides
its own [*File] type which causes simulated operating system file failures
to exercise all failure paths in the implementation.

[heading Associated Types]
* [link nudb.ref.nudb__path_type path_type]
* [link nudb.ref.nudb__file_mode file_mode]
* [link nudb.ref.nudb__error_code error_code]

[heading Notation]

* `F` a [*File] type
* `f` an instance of type F
* `p` an instance of type [link nudb.ref.nudb__path_type path_type]
* `m` an instance of the type [link nudb.ref.nudb__file_mode file_mode]
* `ec` an instance of a reference to the type
      [link nudb.ref.nudb__error_code error_code]
* `n` a number of bytes. Type is `std::size_t`
* 'o' an offset from the beginning of a file. Type is `std::size_t`
* 'a' a memory address of type void *

[heading Valid Expressions]
[table Valid Expressions
[[Operation] [Return Type] [Semantics, Pre/Post-conditions]]
[
    [`F()`]
    [ ]
    [
        Default constructable
    ]
]
[
    [`F(f)`]
    [ ]
    [
        Move constructable.  Note NOT copy constructable.
    ]
]

[
    [`f.is_open()`]
    [`bool`]
    [
        Returns `true` if `f` refers to an open file, false otherwise.
    ]
]
[
    [`f.close()`]
    [`void`]
    [
        If `f` refers to an open file, closes the file. Otherwise, does
        nothing. After this call, `f.is_open()` will return `false`.
    ]
]
[
    [`f.create(m,p,ec)`]
    [`void`]
    [
        Attempts to create a file at the path specified by `p`, and
        open it with the mode specified by `m`. If an error occurs,
        `ec` is set to the system specific error code. If no error
        occurs, a subsequent call to `f.is_open()` will return `true`.
        Behavior is undefined if `f` already refers to an open file.
    ]
]
[
    [`f.open(m,p,ec)`]
    [`void`]
    [
        Attempts to open the file at the path specified by `p`. If
        an error occurs, `ec` is set to the system specific error
        code. If no error occurs, a subsequent call to `f.is_open()`
        will return `true`. Behavior is undefined if `f` already
        refers to an open file.
    ]
]
[
    [`F::erase(p,ec)`]
    [`void`]
    [
        Attempts to delete the file at the path specified by `p`.
        If an error occurs, `ec` is set to the system specific error
        code.
    ]
]
[
    [`f.size(ec)`]
    [`std::size_t`]
    [
        Returns the size of the file in bytes. This value is also equal to
        lowest byte offset for which a read will always return a
        [link nudb.ref.nudb__error short_read] error. Behavior is undefined
        if `f` does not refer to an open file.
    ]
]
[
    [`f.read(o,a,n,ec)`]
    [`void`]
    [
        Attempts to read `n` bytes starting at file offset `o`
        from the open file referred to by `f`. Bytes read are stored
        in the memory buffer at address 'a'. The memory buffer at 'a'
        must be at least n bytes long. If an error occurs, `ec` is set
        to the system specific error code. Behavior is undefined if `f`
        does not refer file opened with [link nudb.ref.nudb__file_mode file_mode]
        equal to scan or read.
    ]
]
[
    [`f.sync(ec)`]
    [`void`]
    [
        Attempts to synchronize the file on disk. This instructs the
        operating system to ensure that any data which resides in caches
        or buffers is fully written to the underlying storage device
        before this call returns. If an error occurs, `ec` is set to the
        system specific error code. Behavior is undefined if
        `f` does not refer to an open file.

        NuDB's database integrity guarantees are only valid if the
        implementation of `sync` assures that all data is fully written
        to the underlying file before the call returns.
    ]
]
[
    [`f.write(o,a,n,ec)`]
    [`void`]
    [
        Attempts to write `n` bytes starting at file offset `o`
        to the open file referred to by `f`.  The memory buffer at
        `a` should contain the `n` bytes meant to be copied to the file.
        If an error occurs, `ec` is set to the system specific error code.
        Behavior is undefined if `f` does not refer a file opened with
        [link nudb.ref.nudb__file_mode file_mode] equal to write or append.
    ]
]
[
    [`f.trunc(o,ec)`]
    [`void`]
    [
        Attempts to change the size of the open file referred to by `f`
        to the size in bytes specified by `o`. If an error occurs, `ec`
        is set to the system specific error code. Behavior is undefined if
        `f` does not refer to an open file. After a successful call,
        `a.size(ec)` will return `o`.

        NuDB's database integrity guarantees are only valid if the
        implementation of `trunc` assures that subsequent calls to
        `size` will return `o`, even if the program is terminated or the
        device is taken offline before calling `size`.
    ]
]
[
    [`is_File<F>`]
    [`std::true_type`]
    [
        returns `std::true_type` for `F`. Otherwise returns `std::false_type`]
]
]

[heading Associated Functions]
* [link nudb.ref.nudb__block_size block_size]
* [link nudb.ref.nudb__erase_file erase_file]

[heading Models]

Two implementations are provided, one for the Win32 API and the other for
POSIX compliant systems. The [link nudb.ref.nudb__native_file native_file] type
alias is automatically set to either [link nudb.ref.nudb__win32_file win32_file]
or [link nudb.ref.nudb__posix_file posix_file] as appropriate.

[endsect]
