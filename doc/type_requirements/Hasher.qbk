[/
    Copyright (c) 2013-2016 Vinnie Falco (vinnie dot falco at gmail dot com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:Hasher Hasher]

A type [@Hasher] implements a hash algorithm. This is used to compute the small
digests NuDB needs to effectively implement a hash table.

[heading Notation]
* `H` is a hasher class
* `h` is an instance of type `H`
* `s` is a random seed of type `std::uint64_t`
* `p` denotes a value of type `void const*`
* `n` denotes a value of type `std::size_t`

[heading Valid Expressions]
[table
[[operation] [type] [semantics, pre/post-conditions]]
[
    [`H{s}`]
    [`H`]
    [
        `H` is constructed with a seed value integer `s`. To achieve resistance
        from algorithmic complexity attacks, an implementation of [*Hasher]
        should ensure that values returned from the hash function will be
        distinctly different for different values of `s`.
    ]
]
[
    [`h(p,n)`]
    [`std::uint64_t`]
    [
        Returns the digest of the memory `n` bytes in size and pointed
        to by `p`. `n` will never be zero. A good hash function will
        return values with these qualities:

* Values are uniformly distributed in the full range

* Values for the same input are distinctly different for different seeds

* Small changes in the input produce unpredictable output values

    ]
]
]

[heading Models]
* [link nudb.ref.nudb__xxhasher xxhasher]
[br]
NuDB provides the default implementation , which is
suitable for most use cases. For advanced applications, users may
supply their own implementation which fulfills the above requirements.

[endsect]
